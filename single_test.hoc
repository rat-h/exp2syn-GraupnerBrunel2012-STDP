// tpre-tpost is varied from -TPOST to +TPOST
TPOST = 101 // time of postsynaptic spike
NREPETITIONS = 60 //Number of repetitions
ITERREPETINTERVAL = 1000 //interval between stimulus
SPIKEAPMLITUDE = 30
STDPSTEPSIZE = 10
load_file("nrngui.hoc")

///// model cell /////
create soma
access soma
L = 10
diam = 100/L/PI
insert pas

// postsynaptic depol:  to 30 mv x 0.1 ms at TPOST
objref sec

sec = new SEClamp(0.5)
sec.rs = 1e-3
sec.dur1 = 1e9
sec.amp1 = -65
sec.dur2 = 0.1
sec.amp2 = 30 // mV peak depol
sec.dur3 = 1e9
sec.amp3 = -65



objref syn, netcon1, netcon2, netstim1, netstim2
//Synapse
syn = new exp2synGBstdp(0.5)
/*
//=====   Use default parameters to reproduce classical STDP curveon Fig.2 top left    ====//
*/

/*
//==== DPD-curve. See Table S1 of supplementary materials to Graupner&Brunel_PNAS_2012 ====//
//====                    Set smaller stdp step to see original curve                  ====//
syn.cpre  = 0.9
syn.cpost = 0.9
syn.gammad= 250
syn.gammap= 550
syn.cdelay= 4.6
STDPSTEPSIZE = 2
*/

/*
//==== DPD'-curve. See Table S1 of supplementary materials to Graupner&Brunel_PNAS_2012 ====//
//====                    Set smaller stdp step to see original curve                  ====//
syn.thetap= 2.5
syn.gammad= 50
syn.gammap= 600
syn.cdelay= 2.2
//STDPSTEPSIZE = 2
*/


//==== Some extra functionality just for fun ====//
//syn.learningdependence = 1
//syn.cpre = 2



//Presynaptic input for STDP
netstim1 = new NetStim(0.5)
netstim1.interval = 10
netstim1.number = 1
netstim1.start = 10
netstim1.noise = 0

//Connections
netcon1 = new NetCon(netstim1,syn)
netcon1.weight[0] = 1e-3	// synaptic conductance
netcon1.weight[1] = 0.5		// rho - synaptic efficacy
netcon1.weight[2] = 0.0		// calcium concentration
netcon1.delay = 0

/*
// If variable step is active very strange lines appears on graphs.....
objref cvode
cvode = new CVode()
cvode.active(1)
*/

objref tpostvec,vpostvec
tpostvec = new Vector(NREPETITIONS*2+1)
vpostvec = new Vector(NREPETITIONS*2+1)

func runtest(){ local Delta, tmax
	Delta = $1
	tmax = 0
	for k=0,NREPETITIONS-1 {
		tpostvec.x[k*2]   = TPOST + k*ITERREPETINTERVAL
		tpostvec.x[k*2+1] = TPOST + k*ITERREPETINTERVAL+0.25
		tmax = TPOST + k*ITERREPETINTERVAL+0.25
		vpostvec.x[k*2]   =  SPIKEAPMLITUDE
		vpostvec.x[k*2+1] = -65
	}
	tstop = tmax + TPOST + abs(Delta)*3
	//tstop = 2*tmax
	tpostvec.x[NREPETITIONS*2] = tstop
	vpostvec.x[NREPETITIONS*2] = -65

	vpostvec.play(&sec.amp1,tpostvec)
	netstim1.interval = ITERREPETINTERVAL

	netstim1.start = TPOST - Delta
	netstim1.number = NREPETITIONS
	//reinit connection
	netcon1.weight[0] = 1e-3
	netcon1.weight[1] = 0.5
	netcon1.weight[2] = 0.0
	
	//to make a simulation faster
	dt=0.25
	steps_per_ms = 4
	stdinit()
	
	run()
	//DB>>
	print "DELAT T=",Delta," STDP=",netcon1.weight[1]*2.
	//<<DB
	return netcon1.weight[1]*2.
}

//Uncomment this if you want to see traces
/*
load_file("init.ses")
*/

objref st, dp
st = new Vector()
st.indgen(-100,100,STDPSTEPSIZE)
dp = new Vector( st.size() )


//to draw STDP curve
objref g
g = new Graph()
g.size(-100,100,0.4,1.6)
g.beginline()
for m=0, st.size()-1 {
	dd = runtest(st.x[m])
	dp.x[m] = dd
	g.line(st.x[m],dd)
	g.flush()
}



